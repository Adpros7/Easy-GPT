name: Codex Auto-Fix on Issue Creation

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.state == 'open' }}
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ISSUE_TITLE: ${{ github.event.issue.title }}
      ISSUE_BODY: ${{ github.event.issue.body }}
      ISSUE_URL: ${{ github.event.issue.html_url }}
      ISSUE_USER: ${{ github.event.issue.user.login }}

    steps:
      - name: Check OpenAI API Key
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Missing OPENAI_API_KEY secret." >&2
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-cache-${{ runner.os }}-audio
          restore-keys: |
            apt-cache-${{ runner.os }}-

      - name: Install ffmpeg and audio dev dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libasound2-dev portaudio19-dev

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          pip install -U pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Initialize Codex home
        run: mkdir -p ~/.codex

      - name: Run Codex to fix issue
        id: codex
        uses: openai/codex-action@main
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          codex-home: ~/.codex
          sandbox: workspace-write
          prompt: >-
            You are working in a Python package repository.
            A user opened an issue titled:
            "${{ env.ISSUE_TITLE }}"

            Description:
            ${{ env.ISSUE_BODY }}

            Identify the bug or issue, locate the relevant Python code,
            and apply the smallest fix necessary to resolve it.
            Do not refactor unrelated code or modify tests unless required.

      - name: Run tests
        run: pytest -q || true

      - name: Create pull request with Codex fix
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "fix: auto-fix issue #${{ github.event.issue.number }} via Codex"
          branch: codex/auto-fix-${{ github.event.issue.number }}
          title: "Auto-fix for issue #${{ github.event.issue.number }}: ${{ env.ISSUE_TITLE }}"
          body: |
            Codex automatically generated this PR in response to issue #${{ github.event.issue.number }}.
            **Issue:** ${{ env.ISSUE_URL }}
            **Author:** @${{ env.ISSUE_USER }}
            **Description:** ${{ env.ISSUE_BODY }}
            This PR contains the minimal change inferred by Codex to resolve the issue.
